pipeline {
    agent any
    
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['dev', 'prod'], description: 'Select the environment to destroy (dev or prod)')
    }
    
    stages {
        stage('Terraform Destroy') {
            steps {
                script {
                    sh 'echo $BRANCH_NAME'
                    // Set Terraform environment variables based on the selected environment
                    if (params.ENVIRONMENT == 'dev' && env.BRANCH_NAME == 'dev') {
                        env.TF_VAR_environment = 'dev' // Use single quotes to specify string literals
                    } else if (params.ENVIRONMENT == 'prod' && env.BRANCH_NAME == 'prod') {
                        env.TF_VAR_environment = 'prod' // Use single quotes to specify string literals
                    } else {
                        error 'Invalid environment selected'
                    }

                    // Initialize Terraform with backend configuration
                    sh '''
                        terraform init
                    '''

                    // Check if the Terraform workspace exists
                    def workspaceExists = sh(script: 'terraform workspace list | grep -q $TF_VAR_environment', returnStatus: true)
                    
                    if (workspaceExists == 0) {
                        echo "Workspace $TF_VAR_environment already exists"
                        sh "terraform workspace select $TF_VAR_environment"
                    } else {
                        // Create the Terraform workspace
                        error "Workspace $TF_VAR_environment does not exist. Cannot destroy infrastructure."
                    }
                    
                    // Destroy the infrastructure
                    sh '''
                        terraform destroy -var-file $TF_VAR_environment.tfvars -auto-approve
                    '''
                }
            }
        }
    }
    
    post {
        success {
            // Add post-build actions if needed
            echo 'Infrastructure destruction successful'
        }
        failure {
            // Add post-build actions for failure cases
            echo 'Infrastructure destruction failed'
        }
    }
}
